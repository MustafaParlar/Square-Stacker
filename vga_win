

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity vga_win is
 Port ( clk : in  std_logic;
 hsync, vsync: out  std_logic ;
 red,green,blue: out STD_LOGIC_VECTOR(3 downto 0));
end vga_win ;

architecture Behavioral of vga_win is
Signal hpos : integer range 0 to 800 := 0 ;
Signal vpos: integer range 0 to 525 := 0;



type square1c is array (0 to 24,0 to 159) of  std_logic;
signal square1: square1c:= (

"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
"0000000000000000000000000000000000000000111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
"0000000001111111000000000111100000000111110001111000000000111111100000000111100000000000111111100000111111100000000111000011111110000011111110000000011110000000",
"0000000000111111000000000011000000001111000000111110000000011111100000000011000000000000011111100000011111100000000010000001111100000001111111000000001100000000",
"0000000000111111000000000010000000011110000000011111000000011111000000000010000000000000001111100000001111100000000010000001111100000000111111000000001100000000",
"0000000000011111100000000110000000111110000000001111000000011111000000000010000000000000001111100000001111110000000110000001111100000000111111100000000100000000",
"0000000000001111100000000100000001111100000000001111100000011111000000000010000000000000000111110000000111110000000100000001111100000000111111110000000100000000",
"0000000000001111110000001100000001111100000000001111110000011111000000000010000000000000000111110000000111110000000100000001111100000000101111111000000100000000",
"0000000000000111110000001000000011111100000000000111110000011111000000000010000000000000000111111000000111111000001000000001111100000000100111111000000100000000",
"0000000000000111111000010000000011111100000000000111110000011111000000000010000000000000000011111000000111111000001000000001111100000000100011111100000100000000",
"0000000000000011111000110000000011111000000000000111110000011111000000000010000000000000000011111000001011111000011000000001111100000000100001111110000100000000",
"0000000000000011111100100000000011111000000000000111111000011111000000000010000000000000000001111100001001111100010000000001111100000000100001111111000100000000",
"0000000000000001111101100000000011111000000000000111111000011111000000000010000000000000000001111100011001111100010000000001111100000000100000111111100100000000",
"0000000000000001111111000000000011111000000000000111110000011111000000000010000000000000000001111110010001111110110000000001111100000000100000011111100100000000",
"0000000000000000111110000000000011111000000000000111110000011111000000000010000000000000000000111110110000111110100000000001111100000000100000001111111100000000",
"0000000000000000111110000000000011111100000000000111110000011111000000000010000000000000000000111111100000111111100000000001111100000000100000000111111100000000",
"0000000000000000111110000000000011111100000000000111110000011111000000000010000000000000000000011111100000111111000000000001111100000000100000000111111100000000",
"0000000000000000111110000000000001111100000000001111100000011111000000000010000000000000000000011111000000011111000000000001111100000000100000000011111100000000",
"0000000000000000111110000000000001111100000000001111100000011111100000000010000000000000000000011111000000011111000000000001111100000000100000000001111100000000",
"0000000000000000111110000000000000111110000000001111000000001111100000000110000000000000000000001111000000001110000000000001111100000000100000000000111100000000",
"0000000000000000111111000000000000011110000000011110000000001111100000000100000000000000000000001110000000001110000000000001111100000000100000000000011100000000",
"0000000000000000111111000000000000001111000000111100000000000111110000011000000000000000000000000110000000001110000000000001111110000001100000000000001100000000",
"0000000000000001111111100000000000000011110011110000000000000011111111110000000000000000000000000100000000000100000000000011111111000111111000000000001100000000",
"0000000000000000000000000000000000000000011110000000000000000000011110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
);

begin


process (clk) 
begin
if rising_edge(clk) then
        
    if (hpos = 800) then 
        hpos <= 0;
        if vpos < 525 then 
            vpos <= vpos + 1 ;
        else 
            vpos <= 0; 
        end if;
    else 
        hpos <=hpos + 1;
    end if;

    if (hpos > 16 and hpos < 113) then
        hsync <= '0';
    else 
        hsync <= '1';
    end if; 

    if (vpos > 10 and vpos < 13) then
        vsync <= '1';
    else 
        vsync <= '0';
    end if;
    
    if (hpos >= 160 and hpos < 800 and vpos < 295 and vpos >= 195  ) then
        if square1(((vpos-195)/4),((hpos-160)/4))='1' then
            red <= (others => '1');
            green <= "1100";
            blue <= "1111";
        else 
            red <= (others => '0');
            green <= (others => '0');
            blue <= (others => '0');
        end if;

   
   else 
       red <= (others => '0');
       green <= (others => '0');
       blue <= (others => '0');
       end if;
end if;

end process;

end Behavioral;
